worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;

}
http {
    server {
        listen 8080;
        lua_code_cache off;

        location /luafile {
            content_by_lua_file 'lua/hello.lua';
        }

        location /uploadfile {
            content_by_lua_file 'lua/uploadfile.lua';
        }

        location ~ /lua_request/(\d+)/(\d+) {
            #设置nginx变量
            set $a $1;
            set $b $host;
            default_type "text/html";
            #nginx内容处理
            content_by_lua_file lua/test_request.lua;
            #内容体处理完成后调用
            echo_after_body "ngx.var.b $b";
        }

        location ~* ^/resize {
            root /www/data/site_cache/$server_name;
            set $width 150;
            set $height 100;
            set $dimens "";

            if ($uri ~* "^/resize_(\d+)x(\d+)/(.*)" ) {
                set $width $1;
                set $height $2;
                set $image_path $3;
                set $demins "_$1x$2";

            }

            if ($uri ~* "^/resize/(.*)" ) {
                set $image_path $1;

            }

            set $image_uri image_resize/$image_path?width=$width&height=$height;

            if (!-f $request_filename) {
                proxy_pass http://127.0.0.1:8080/$image_uri;
                break;

            }
            proxy_store /www/data/site_cache/$server_name/resize$demins/$image_path;
            proxy_store_access user:rw group:rw all:r;
            proxy_set_header Host $host;
            expires      30d;
            access_log off;

        }

        location /image_resize {
            alias /www/data/site_cache/$server_name/;
            image_filter resize $arg_width $arg_height;
            image_filter_jpeg_quality 75;
            access_log off;

        }

        location / {
            default_type text/html;
            content_by_lua_block{
                ngx.say("<p>hello, world</p>")
            }
        }
    }
}
